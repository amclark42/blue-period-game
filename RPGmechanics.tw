::passTurn [mechanics]
/% passTurn should be used at the beginning of a turn %/
<<nobr>>
<<set $spotlight = parameter(0)>>
<<set $spotlight.str.turnStat()>>
<<set $spotlight.con.turnStat()>>
<<set $spotlight.agi.turnStat()>>
<<set $spotlight.acc.turnStat()>>
<<endnobr>>


::attack [mechanics]
<<nobr>>
<<set $damage = 0>>
<<set $attacker = parameter(0)>>
<<set $attackee = parameter(1)>>
<<print $attacker.name>> versus <<print $attackee.name>><br>

/% Determine success floor %/
<<set $sucFlr = 5 - $attacker.acc.actual + $attackee.eva.actual>>
$sucFlr = <<print $sucFlr>><br>

/% Roll for hit %/
<<set $AC = random(1,20)>>
$AC = <<print $AC>><br>
/% Is AC a critical miss? %/
<<if $AC is 1>>
<<endif>>

/% Calculate damage %/
<<if $AC >= $sucFlr>>
	<<set $damage = random($attacker.weapon.dStage,$attacker.weapon.dStage * 6) + $attacker.str.actual - $attackee.con.actual>>
	/% Minimum damage is 1 %/
	<<if $damage <= 0>>
		<<set $damage = 1>>
	<<endif>>
	/% Calculate critical damage %/
	<<if $AC is 20>>
		<<set $damage = $damage * 2>>
	<<endif>>
	/% Reduce attackee's HP %/
	<<set $attackee.hp -= $damage>>
<<endif>>
<<print $attackee.name>> hp = <<print $attackee.hp>> after <<print $damage>> damage<br>
<<endnobr>>


::defend [mechanics]
<<nobr>>
<<set $defender = parameter(0)>>
<<set $defender.con.modStat($defend)>>
<<endnobr>>
