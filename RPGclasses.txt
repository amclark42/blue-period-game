::RPG classes and engine [script]
window.ObjWiki = function () {
	this.listContents = function () {
		for(var item in this) {
			if(heldItems) {
				heldItems += ", ";
			}
			else {
				var heldItems = "You have: ";
			}
			heldItems += this[item].amount + " " + this[item].objRef.name;
		}
		heldItems += ".";
		return heldItems;
	}
}
/* listContents() needs to become a macro */
window.listContents = function (wiki) {
	for(var item in wiki) {
		if(heldItems) {
			heldItems += ", ";
		}
		else {
			var heldItems = "You have: ";
		}
		heldItems += wiki[item].amount + " " + wiki[item].objRef.name;
	}
	heldItems += ".";
	return heldItems;
}

window.Item = function (name,description) {
	this.name = name;
	this.description = description;
};
window.Weapon = function (name,description,cStage) {
	/* Weapon class is a child of Item */
	Item.call(this,name,description);

	this.cStage = cStage;
}
window.Armor = function (name,description,cStage) {
	/* Armor class is a child of Item */
	Item.call(this,name,description);

	this.cStage = cStage;
}
window.RefItem = function (obj,num) {
	this.objRef = obj;
	this.amount = num;
	this.changeAmount = function(amt) {
		if(this.amount >= Math.abs(amt)) {
			this.amount += amt;
		}
		else this.amount = amt;
	}
};

window.Combatant = function (name,title) {
	this.name = name;
	this.title = title;
	
	/* Initialization functions */
	this.initHP = function (current,max) {
		this.hp = current;
		this.maxHP = max;
	}
	this.initMP = function (current,max) {
		this.mp = current;
		this.maxMP = max;
	}
	this.initAP = function (current,goal) {
		this.ap = current;
		this.maxAP = goal;
	}
	this.initStats = function (str,con,agi,acc) {
		this.str = new Stat(str);
		this.con = new Stat(con);
		this.acc = new Stat(agi);
		this.eva = new Stat(acc);
	}
	this.equipWeapon = function (weapon) {
		this.weapon = weapon;
	}
	this.equipArmor = function (armor) {
		this.armor = armor;
	}
}
window.Stat = function(base) {
	this.base = base;
	this.actual = base;
	this.mods = [];
	this.modStat = function(mod) {
		this.mods.push(new RefMod(mod));
		this.actual += mod.modAmt;
	}
}
window.Mod = function(source,amount,turns) {
	this.source = source;
	this.modAmt = amount;
	this.turns = turns;
}
window.RefMod = function(mod) {
	this.modRef = mod;
	this.duration = mod.turns;
}